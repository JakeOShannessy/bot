#!/bin/bash

#---------------------------------------------
#                   USAGE
#---------------------------------------------

function USAGE {
  echo "Usage: sshbot.sh "
  echo ""
  echo "clusterbot.sh - perform various checks to verify a Linux cluster is working properly. If the -q option"
  echo "                is specified, run test cases on multiple nodes. The test cases are very simple designed"
  echo "                only to verify that communication works between processes.  To run more realistic test"
  echo "                cases, use firebot or smokebot."
  echo ""
  echo " -f - override lock to force clusterbot run"
  echo " -h - display this message"
  exit
}

#---------------------------------------------
#                   MKDIR
#---------------------------------------------

MKDIR ()
{
 local dir=$1

 if [ ! -d $dir ]; then
   mkdir -p $dir
 fi
 if [ ! -d $dir ]; then
   error "***error: failed to create the directory $dir"
   return 0
 fi
 return 1
}

#---------------------------------------------
#                   MAKE_DATA_DIRS
#---------------------------------------------

MAKE_DATA_DIRS()
{
  tempfile=$SCRIPTDIR/temp.$$
  touch $tempfile
  ERROR=
  if [ -e $tempfile ]; then
    rm $tempfile
    CB_DATA_DIR=$SCRIPTDIR
  else
    CB_DATA_DIR=$HOME/.clusterbot
    MKDIR $CB_DATA_DIR
  fi
  OUTPUT_DIR=$CB_DATA_DIR/output
  FDSOUTPUT_DIR=$CB_DATA_DIR/fdsoutput
  FILES_DIR=$CB_DATA_DIR/files
  MKDIR $OUTPUT_DIR
  if [ $? -eq 0 ]; then
    ERROR=1
  fi
  MKDIR $FDSOUTPUT_DIR
  if [ $? -eq 0 ]; then
    ERROR=1
  fi
  MKDIR $FILES_DIR
  if [ $? -eq 0 ]; then
    ERROR=1
  fi
  if [ "$ERROR" == "1" ]; then
    return 1
  fi
  rm -f $OUTPUT_DIR/*
  rm -f $FILES_DIR/*
  rm -f $FDSOUTPUT_DIR/*
  return 0
}

#---------------------------------------------
#                   CHECK_SSHD_CONFIG
#---------------------------------------------

CHECK_SSHD_CONFIG ()
{
  local file=sshdT_config
  local filesave=${file}.save
  local fullfile=/tmp/${file}.$$
  
  if [ "$USE_SUDO" == "" ]; then
    echo "*** sudo command required to perform this check"
    USE_SUDO=1
  fi
  sudo sshd -T | sort >  $fullfile
  if [ ! -e $ARCHIVEDIR/$filesave ]; then
    cp $fullfile $ARCHIVEDIR/$filesave
  fi

  diffs=`diff $ARCHIVEDIR/$filesave $fullfile | wc -l`
  dirdate=`ls -l $ARCHIVEDIR/$filesave | awk '{print $6" "$7" "$8}'`
 
  if [ $diffs -eq 0 ]; then
    echo "   `hostname -s`: sshd configuration parameters, generated by sshd -T, have not changed since they were archived at $ARCHIVEDIR/$filesave on $dirdate"
  else
    echo "   `hostname -s`: ***warning: sshd configuration parameters, generated by sshd -T, have changed since they were archived at $ARCHIVEDIR/$filesave on $dirdate"
  fi
  rm $fullfile
}

#---------------------------------------------
#                   CHECK_FILE_ROOT
#---------------------------------------------

CHECK_FILE_ROOT ()
{
  local fullfile=$1
  local file=`basename $fullfile`
  local filesave=${file}.save
  local fileenc=${file}.enc

  if [ ! -e $fullfile ]; then
    echo "***error: $fullfile does not exist"
    return
  fi
  
  if [ "$USE_SUDO" == "" ]; then
    echo "*** sudo command required to perform this check"
    USE_SUDO=1
  fi
  if [ ! -e $ARCHIVEDIR/$filesave ]; then
    sudo cp $fullfile $ARCHIVEDIR/$filesave
  fi

  diffs=`sudo diff $ARCHIVEDIR/$filesave $fullfile | wc -l`
 
  dirdate=`ls -l $ARCHIVEDIR/$filesave | awk '{print $6" "$7" "$8}'`
  if [ $diffs -eq 0 ]; then
    echo "   `hostname -s`: $fullfile contents have not changed since a copy was archived at $ARCHIVEDIR/$filesave on $dirdate"
  else
    echo "   `hostname -s`: ***Warning: $fullfile contents have changed since a copy was archived at $ARCHIVEDIR/$filesave on $dirdate"
  fi
}

#---------------------------------------------
#                   CHECK_FILE
#---------------------------------------------

CHECK_FILE ()
{
  local file=$1
  local ERRWARN=$2
  local INDENT=$3
  local outdir=$4
  local CB_HOST_ARG=$5

  if [ "$CB_HOST_ARG" == "" ]; then
    return 0
  fi
  FILE_OUT=$outdir/check_file.out
  FILE_OUT2=$outdir/check_file.out2
  pdsh -t 2 -w $CB_HOST_ARG `pwd`/getfile.sh $file $outdir >& $FILE_OUT2
  cat $FILE_OUT2 | grep -v ssh | grep -v Connection | sort >& $FILE_OUT
  file0=`head -1 $FILE_OUT | awk '{print $2}'`

  local CURDIR=`pwd`
  cd $outdir
 
  FILEDIFF=
  while read line 
  do
    hosti=`echo $line | awk '{print $1}' | awk -F':' '{print $1}'`
    filei=`echo $line | awk '{print $2}'`
    ndiff=`diff $file0 $filei | wc -l`
    if [ $ndiff -ne 0 ]; then
      if [ "$FILEDIFF" == "" ]; then
        FILEDIFF="$hosti"
      else
        FILEDIFF="$FILEDIFF $hosti"
      fi
    fi
  done < $FILE_OUT
  cd $CURDIR

  if [ "$FILEDIFF" == "" ]; then
    if [ "$INDENT" == "1" ]; then
      echo "   $CB_HOST_ARG:    $file is identical"
    else
      echo "   $CB_HOST_ARG: $file is identical"
    fi
    return 0
  else
    if [ "$INDENT" == "1" ]; then
      echo "   $CB_HOST_ARG:    ***$ERRWARN: $file is different on $FILEDIFF "
    else
      echo "   $CB_HOST_ARG: ***$ERRWARN: $file is different on $FILEDIFF "
    fi
    return 1
  fi
}

#************************** beginning of script ******************************************

#*** find platform script is running on

platform="linux"
if [ "`uname`" == "Darwin" ] ; then
  platform="osx"
fi

#*** find user running script

SCRIPTDIR=`pwd`
BIN=`dirname "$0"`
if [ "$BIN" == "." ]; then
  BIN=
fi
SCRIPTDIR=$SCRIPTDIR/$BIN

FORCE_UNLOCK=
CHECK_ROOT_FILES=
PASSWORD_GIVEN=
USE_SUDO=

while getopts 'fhr' OPTION
do
case $OPTION  in
  f)
   FORCE_UNLOCK=1
   ;;
  h)
   USAGE
   exit
   ;;
  r)
   CHECK_ROOT_FILES=1
   WHOAMI=`whoami`
   if [ "$platform" == "linux" ]; then
     CAN_I_SUDO=`grep wheel /etc/group | grep $WHOAMI | wc -l`
     if [ $CAN_I_SUDO -eq 0 ]; then
       echo "***error: $WHOAMI does not have permission to use the sudo command"
       echo "          needed to check files readable only by root. File size and"
       echo "          modification date will be checked instead."
       CHECK_ROOT_FILES=
     fi
   fi
   ;;
esac
done
shift $(($OPTIND-1))

# --------------------- make sure output directories exist  --------------------

MAKE_DATA_DIRS ||  exit

# --------------------- define file names --------------------

LOCK_FILE=$HOME/.clusterbot/lockfile

MKDIR $HOME/.clusterbot
MKDIR $HOME/.clusterbot/archive

ARCHIVEDIR=$HOME/.clusterbot/archive

if [[ "$FORCE_UNLOCK" == "" ]] && [[ -e $LOCK_FILE ]]; then
  echo "***error: another instance of sshbot.sh is running"
  echo "          If this is not the case, rerun using the -f option"
  exit
fi

touch $LOCK_FILE

# --------------------- initial error checking --------------------

ERROR=

if [ "$CHECK_ROOT_FILES" != "" ]; then
  echo ""
  echo "--------------------- checking files and configuration parameters accessible only by root --------------------------"
  if [ "$platform" == "linux" ]; then
    CHECK_FILE_ROOT /etc/slurm/slurmdbd.conf
  fi
  CHECK_FILE_ROOT /etc/ssh/sshd_config
  CHECK_SSHD_CONFIG
fi

STOP_TIME=`date`
echo ""
echo "--------------------- clusterbot complete ------------------------------"
echo "start time: $START_TIME"
echo "stop time: $STOP_TIME"

rm $LOCK_FILE
